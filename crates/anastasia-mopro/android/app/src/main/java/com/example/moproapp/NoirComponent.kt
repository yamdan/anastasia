package com.example.moproapp

import android.util.Log
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Button
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import uniffi.mopro.CircuitMeta
import uniffi.mopro.commitAttrs
import uniffi.mopro.verifyNoirProof
import uniffi.mopro.prove

fun bytes(vararg ints: Int): ByteArray =
    ints.map { it.toByte() }.toByteArray()

@Composable
fun NoirComponent() {
    val context = LocalContext.current
    var provingTime by remember { mutableStateOf("") }
    var proofResult by remember { mutableStateOf("") }
    var verificationTime by remember { mutableStateOf("") }
    var verificationResult by remember { mutableStateOf("") }
    var proofBytes by remember { mutableStateOf<ByteArray?>(null) }
    var verificationKey by remember { mutableStateOf<ByteArray?>(null) }

    // Status states
    var isGeneratingProof by remember { mutableStateOf(false) }
    var isVerifyingProof by remember { mutableStateOf(false) }
    var statusMessage by remember { mutableStateOf("Ready to generate proof") }

    val srsFile = getFilePathFromAssets("common.srs")
    val caCircuitFile = getFilePathFromAssets("es256_ca.json")
    val caVkFile = getFilePathFromAssets("es256_ca.vk")
    val eeCircuitFile = getFilePathFromAssets("es256_ee.json")
    val eeVkFile = getFilePathFromAssets("es256_ee.vk")

    Box(modifier = Modifier.fillMaxSize().padding(16.dp), contentAlignment = Alignment.Center) {
        Column(horizontalAlignment = Alignment.CenterHorizontally) {
            Text(
                text = "ES256 Chain Verification",
                modifier = Modifier.padding(bottom = 20.dp),
                fontWeight = FontWeight.Bold,
                fontSize = 22.sp
            )

            // Status message with prominent styling
            Text(
                text = statusMessage,
                modifier = Modifier.padding(bottom = 24.dp),
                textAlign = TextAlign.Center,
                fontSize = 16.sp,
                fontWeight = if (isGeneratingProof || isVerifyingProof) FontWeight.Bold else FontWeight.Normal
            )

            // Progress indicator when operations are running
            if (isGeneratingProof || isVerifyingProof) {
                CircularProgressIndicator(
                    modifier = Modifier.padding(bottom = 16.dp)
                )
            }

            Button(
                onClick = {
                    isGeneratingProof = true
                    provingTime = ""
                    proofResult = ""
                    statusMessage = "Generating proof... This may take some time"

                    Thread(
                        Runnable {
                            try {
                                val caCert = bytes(
                                    0x30, 0x82, 0x01, 0xe6, 0x30, 0x82, 0x01, 0x8c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x11, 0x00, 0xe5, 0xbf, 0xa9, 0x77, 0x15, 0xc1, 0xcb, 0x11, 0x70, 0xc3, 0x0e, 0x01, 0x33, 0x1e, 0xef, 0x42, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x29, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x4c, 0x4c, 0x43, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x09, 0x44, 0x72, 0x6f, 0x69, 0x64, 0x20, 0x43, 0x41, 0x33, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x38, 0x32, 0x31, 0x31, 0x37, 0x32, 0x37, 0x30, 0x34, 0x5a, 0x17, 0x0d, 0x32, 0x35, 0x30, 0x39, 0x31, 0x36, 0x31, 0x35, 0x32, 0x30, 0x31, 0x30, 0x5a, 0x30, 0x3f, 0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x20, 0x65, 0x35, 0x62, 0x66, 0x61, 0x39, 0x37, 0x37, 0x31, 0x35, 0x63, 0x31, 0x63, 0x62, 0x31, 0x31, 0x37, 0x30, 0x63, 0x33, 0x30, 0x65, 0x30, 0x31, 0x33, 0x33, 0x31, 0x65, 0x65, 0x66, 0x34, 0x32, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x09, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xa3, 0x30, 0xd2, 0x88, 0x45, 0xc2, 0xf4, 0xb1, 0x60, 0xa7, 0xa5, 0xa8, 0xec, 0x1e, 0x46, 0x21, 0x31, 0x18, 0x5e, 0x25, 0xba, 0x48, 0x7e, 0xba, 0x2f, 0xbb, 0x41, 0xd7, 0x18, 0xa7, 0xa6, 0xbf, 0xd7, 0x87, 0x8d, 0xc6, 0x36, 0xe4, 0x1e, 0xa4, 0xe2, 0x51, 0x6a, 0xa9, 0xc4, 0xf7, 0x1f, 0xce, 0x15, 0xf5, 0xd2, 0x48, 0x34, 0x05, 0x82, 0x56, 0x99, 0x72, 0x5c, 0xb1, 0x3c, 0xeb, 0x47, 0xcd, 0xa3, 0x7f, 0x30, 0x7d, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x83, 0x29, 0xbe, 0xbb, 0x68, 0xbc, 0x24, 0xed, 0x89, 0x38, 0x4d, 0xb4, 0xf1, 0x94, 0x6c, 0x20, 0xd7, 0x95, 0x9a, 0x05, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xfe, 0x62, 0x6c, 0xdc, 0x2a, 0xe5, 0x80, 0xe7, 0x19, 0x6a, 0xca, 0x23, 0xdd, 0x23, 0xf1, 0x39, 0x02, 0x46, 0xa8, 0xa5, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x02, 0x04, 0x30, 0x1a, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x01, 0x1e, 0x04, 0x0c, 0xa2, 0x01, 0x18, 0x20, 0x03, 0x66, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xc9, 0x77, 0x3e, 0x28, 0xaa, 0x2b, 0x6c, 0x2a, 0xe5, 0x4b, 0xf0, 0x9f, 0xaa, 0xdf, 0x64, 0xc8, 0x23, 0x99, 0xcb, 0x1a, 0xb6, 0x6e, 0xa9, 0x07, 0x24, 0x3d, 0x9b, 0x83, 0x3a, 0x9a, 0x57, 0xd2, 0x02, 0x20, 0x21, 0xad, 0x97, 0xb8, 0x34, 0x04, 0x03, 0x56, 0xe1, 0x4e, 0x15, 0x5c, 0x78, 0x14, 0x91, 0x7a, 0xa3, 0x76, 0x55, 0x50, 0xf9, 0x0b, 0x0c, 0x5d, 0x0b, 0x5b, 0xbe, 0x43, 0xef, 0xcc, 0x31, 0xa3
                                )
                                val caAuthorityKeyId = bytes(
                                    0xfe, 0x62, 0x6c, 0xdc, 0x2a, 0xe5, 0x80, 0xe7, 0x19, 0x6a, 0xca, 0x23, 0xdd, 0x23, 0xf1, 0x39, 0x02, 0x46, 0xa8, 0xa5
                                )
                                val caIssuerPkX = bytes(
                                    0x29, 0xc2, 0xef, 0x24, 0xa4, 0xbe, 0x89, 0xfd, 0x51, 0x35, 0x89, 0x24, 0xb3, 0x2e, 0x38, 0xd2, 0x5b, 0x64, 0x9e, 0x4e, 0x96, 0xff, 0x0b, 0x6f, 0x6b, 0xe2, 0x12, 0x87, 0x1b, 0xf5, 0x26, 0x27
                                )
                                val caIssuerPkY = bytes(
                                    0x9a, 0x9d, 0x6b, 0x56, 0x68, 0x29, 0xbf, 0x3a, 0xf8, 0xfe, 0xe0, 0x50, 0x94, 0x3f, 0xbb, 0x70, 0xab, 0xf5, 0xb1, 0xb3, 0x5a, 0xc1, 0xe3, 0xb8, 0x95, 0xee, 0x2e, 0xc0, 0xa8, 0x5a, 0xfb, 0xd2
                                )
                                val caIssuer = bytes(
                                    0x30, 0x29, 0x31, 0x13, 0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x20, 0x4c, 0x4c, 0x43, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x09, 0x44, 0x72, 0x6f, 0x69, 0x64, 0x20, 0x43, 0x41, 0x33
                                )
                                val caCommitResult = commitAttrs(
                                    caIssuer,
                                    caAuthorityKeyId,
                                    caIssuerPkX,
                                    caIssuerPkY,
                                    null
                                )
                                val caPrevCmt = caCommitResult.cmt
                                val caPrevCmtR = caCommitResult.r
                                //val caPrevCmt = "0ede28f511104f08069e07986707873be5cbba917f02f02407ad1fdd6838679b"
                                //val caPrevCmtR = "deadbeef"

                                val startTime = System.currentTimeMillis()
                                statusMessage = "(1) Generating proof of CA certificate..."
                                val caResult = prove(
                                    CircuitMeta(
                                        "ES256-CA",
                                        caCircuitFile,
                                        caVkFile,
                                        srsFile,
                                    ),
                                    caCert,
                                    caAuthorityKeyId,
                                    caIssuerPkX,
                                    caIssuerPkY,
                                    caPrevCmt,
                                    caPrevCmtR,
                                )
                                val caProof = caResult.proof
                                val caNextCmt = caResult.nextCmt
                                val caNextCmtR = caResult.nextCmtR
                                Log.w(null, caProof)
                                Log.w(null, caNextCmt)
                                Log.w(null, caNextCmtR)

                                /*
                                Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1 (0x1)
        Signature Algorithm: ecdsa-with-SHA256
        Issuer: CN=e5bfa97715c1cb1170c30e01331eef42, O=StrongBox
        Validity
            Not Before: Jan  1 00:00:00 1970 GMT
            Not After : Jan  1 00:00:00 2048 GMT
        Subject: CN=Android Keystore Key
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:b4:46:2b:e1:47:16:55:9d:26:f1:2e:60:4f:ed:
                    e1:53:39:d2:5a:a4:f5:db:da:49:6e:1f:30:43:36:
                    01:ed:74:f6:39:6f:87:e8:e7:20:55:3d:86:22:a1:
                    bb:d7:ab:f5:01:19:1b:ae:74:94:97:86:76:47:6b:
                    00:fb:d6:da:90
                ASN1 OID: prime256v1
                NIST CURVE: P-256
        X509v3 extensions:
            X509v3 Key Usage: critical
                Digital Signature
            1.3.6.1.4.1.11129.2.1.17:
                0......,
.....,
.......0U..=.......a...EE.C0A1.0...com.example.moproapp...1". .......;....cq......C=v....KS..v0....1....................1...........x......>......@L0J. 3'.b.J...%#.m.X...][.......G...C...
... ..PO.QE.@-n..b|v...a%.....b..!_...A....q...B........N....5....O....5..
    Signature Algorithm: ecdsa-with-SHA256
    Signature Value:
        30:45:02:20:7e:3f:76:7e:37:e6:36:38:6b:a2:3f:f7:ea:24:
        aa:bd:ba:ec:db:d5:58:ac:d6:56:db:5b:15:b0:52:3d:c8:f4:
        02:21:00:a8:61:1f:3c:20:96:80:5c:af:47:8f:21:8f:27:e6:
        37:d3:5b:e4:c6:db:29:5d:8d:23:67:80:c5:f1:9b:5c:22
                                 */
                                val eeCert = bytes(
                                    0x30, 0x82, 0x02, 0x8d, 0x30, 0x82, 0x02, 0x33, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x3f, 0x31, 0x29, 0x30, 0x27, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x20, 0x65, 0x35, 0x62, 0x66, 0x61, 0x39, 0x37, 0x37, 0x31, 0x35, 0x63, 0x31, 0x63, 0x62, 0x31, 0x31, 0x37, 0x30, 0x63, 0x33, 0x30, 0x65, 0x30, 0x31, 0x33, 0x33, 0x31, 0x65, 0x65, 0x66, 0x34, 0x32, 0x31, 0x12, 0x30, 0x10, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x09, 0x53, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x30, 0x1e, 0x17, 0x0d, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x34, 0x38, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x1f, 0x31, 0x1d, 0x30, 0x1b, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x14, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x20, 0x4b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x4b, 0x65, 0x79, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xb4, 0x46, 0x2b, 0xe1, 0x47, 0x16, 0x55, 0x9d, 0x26, 0xf1, 0x2e, 0x60, 0x4f, 0xed, 0xe1, 0x53, 0x39, 0xd2, 0x5a, 0xa4, 0xf5, 0xdb, 0xda, 0x49, 0x6e, 0x1f, 0x30, 0x43, 0x36, 0x01, 0xed, 0x74, 0xf6, 0x39, 0x6f, 0x87, 0xe8, 0xe7, 0x20, 0x55, 0x3d, 0x86, 0x22, 0xa1, 0xbb, 0xd7, 0xab, 0xf5, 0x01, 0x19, 0x1b, 0xae, 0x74, 0x94, 0x97, 0x86, 0x76, 0x47, 0x6b, 0x00, 0xfb, 0xd6, 0xda, 0x90, 0xa3, 0x82, 0x01, 0x3e, 0x30, 0x82, 0x01, 0x3a, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x82, 0x01, 0x26, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x01, 0x11, 0x04, 0x82, 0x01, 0x16, 0x30, 0x82, 0x01, 0x12, 0x02, 0x02, 0x01, 0x2c, 0x0a, 0x01, 0x02, 0x02, 0x02, 0x01, 0x2c, 0x0a, 0x01, 0x02, 0x04, 0x01, 0x00, 0x04, 0x00, 0x30, 0x55, 0xbf, 0x85, 0x3d, 0x08, 0x02, 0x06, 0x01, 0x99, 0x03, 0xec, 0x61, 0xb9, 0xbf, 0x85, 0x45, 0x45, 0x04, 0x43, 0x30, 0x41, 0x31, 0x1b, 0x30, 0x19, 0x04, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x6d, 0x6f, 0x70, 0x72, 0x6f, 0x61, 0x70, 0x70, 0x02, 0x01, 0x01, 0x31, 0x22, 0x04, 0x20, 0xa6, 0xbf, 0xe8, 0xe8, 0x02, 0x9a, 0xff, 0x3b, 0xe3, 0x88, 0xbe, 0xb0, 0x63, 0x71, 0xcc, 0xdf, 0x94, 0xf8, 0x01, 0xdf, 0x43, 0x3d, 0x76, 0xb7, 0xcb, 0xed, 0xcf, 0x4b, 0x53, 0x8d, 0xd8, 0x76, 0x30, 0x81, 0xa5, 0xa1, 0x08, 0x31, 0x06, 0x02, 0x01, 0x02, 0x02, 0x01, 0x03, 0xa2, 0x03, 0x02, 0x01, 0x03, 0xa3, 0x04, 0x02, 0x02, 0x01, 0x00, 0xa5, 0x05, 0x31, 0x03, 0x02, 0x01, 0x04, 0xaa, 0x03, 0x02, 0x01, 0x01, 0xbf, 0x83, 0x78, 0x03, 0x02, 0x01, 0x02, 0xbf, 0x85, 0x3e, 0x03, 0x02, 0x01, 0x00, 0xbf, 0x85, 0x40, 0x4c, 0x30, 0x4a, 0x04, 0x20, 0x33, 0x27, 0xaf, 0x62, 0xd8, 0x4a, 0xb8, 0x97, 0xaf, 0x25, 0x23, 0xa1, 0x6d, 0xcb, 0x58, 0x01, 0xe6, 0x0c, 0x5d, 0x5b, 0x97, 0xf4, 0x1c, 0xa1, 0xbd, 0x09, 0x9c, 0x47, 0x84, 0xf7, 0xb7, 0x43, 0x01, 0x01, 0xff, 0x0a, 0x01, 0x00, 0x04, 0x20, 0xc2, 0x09, 0x50, 0x4f, 0x91, 0x51, 0x45, 0x80, 0x40, 0x2d, 0x6e, 0xe0, 0xb3, 0x62, 0x7c, 0x76, 0xcd, 0xe3, 0xdb, 0x61, 0x25, 0x80, 0x89, 0xac, 0xa8, 0x9b, 0x62, 0x19, 0xf3, 0x21, 0x5f, 0x91, 0xbf, 0x85, 0x41, 0x05, 0x02, 0x03, 0x02, 0x71, 0x00, 0xbf, 0x85, 0x42, 0x05, 0x02, 0x03, 0x03, 0x17, 0x0c, 0xbf, 0x85, 0x4e, 0x06, 0x02, 0x04, 0x01, 0x35, 0x00, 0xb5, 0xbf, 0x85, 0x4f, 0x06, 0x02, 0x04, 0x01, 0x35, 0x00, 0xb5, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x20, 0x7e, 0x3f, 0x76, 0x7e, 0x37, 0xe6, 0x36, 0x38, 0x6b, 0xa2, 0x3f, 0xf7, 0xea, 0x24, 0xaa, 0xbd, 0xba, 0xec, 0xdb, 0xd5, 0x58, 0xac, 0xd6, 0x56, 0xdb, 0x5b, 0x15, 0xb0, 0x52, 0x3d, 0xc8, 0xf4, 0x02, 0x21, 0x00, 0xa8, 0x61, 0x1f, 0x3c, 0x20, 0x96, 0x80, 0x5c, 0xaf, 0x47, 0x8f, 0x21, 0x8f, 0x27, 0xe6, 0x37, 0xd3, 0x5b, 0xe4, 0xc6, 0xdb, 0x29, 0x5d, 0x8d, 0x23, 0x67, 0x80, 0xc5, 0xf1, 0x9b, 0x5c, 0x22
                                )



                                val eeAuthorityKeyId = bytes(
                                    0x83, 0x29, 0xbe, 0xbb, 0x68, 0xbc, 0x24, 0xed, 0x89, 0x38, 0x4d, 0xb4, 0xf1, 0x94, 0x6c, 0x20, 0xd7, 0x95, 0x9a, 0x05
                                )
                                val eeIssuerPkX = bytes(
                                    0xa3, 0x30, 0xd2, 0x88, 0x45, 0xc2, 0xf4, 0xb1, 0x60, 0xa7, 0xa5, 0xa8, 0xec, 0x1e, 0x46, 0x21, 0x31, 0x18, 0x5e, 0x25, 0xba, 0x48, 0x7e, 0xba, 0x2f, 0xbb, 0x41, 0xd7, 0x18, 0xa7, 0xa6, 0xbf
                                )
                                val eeIssuerPkY = bytes(
                                    0xd7, 0x87, 0x8d, 0xc6, 0x36, 0xe4, 0x1e, 0xa4, 0xe2, 0x51, 0x6a, 0xa9, 0xc4, 0xf7, 0x1f, 0xce, 0x15, 0xf5, 0xd2, 0x48, 0x34, 0x05, 0x82, 0x56, 0x99, 0x72, 0x5c, 0xb1, 0x3c, 0xeb, 0x47, 0xcd
                                )

                                statusMessage = "(2) Generating proof of EE certificate..."
                                val eeResult = prove(
                                    CircuitMeta(
                                        "ES256-EE",
                                        eeCircuitFile,
                                        eeVkFile,
                                        srsFile,
                                    ),
                                    eeCert,
                                    eeAuthorityKeyId,
                                    eeIssuerPkX,
                                    eeIssuerPkY,
                                    caNextCmt,
                                    caNextCmtR,
                                )
                                val eeProof = eeResult.proof
                                val eeNextCmt = eeResult.nextCmt
                                val eeNextCmtR = eeResult.nextCmtR
                                Log.w(null, eeProof)
                                Log.w(null, eeNextCmt)
                                Log.w(null, eeNextCmtR)

                                val endTime = System.currentTimeMillis()
                                val duration = endTime - startTime

                                val proofSizeHex = caProof.length + caNextCmt.length + caNextCmtR.length + eeProof.length + eeNextCmt.length + eeNextCmtR.length
                                val proofSize = proofSizeHex / 2 // bytes
                                provingTime = "Proving time: $duration ms"
                                proofResult = "Proof generated: $proofSize bytes"
                                statusMessage = "Proof generation completed"
                            } catch (e: Exception) {
                                provingTime = "Proving failed"
                                proofResult = "Error: ${e.message}"
                                statusMessage = "Proof generation failed"
                                e.printStackTrace()
                            } finally {
                                isGeneratingProof = false
                            }
                        }
                    ).start()
                },
                modifier = Modifier.padding(top = 20.dp),
                enabled = !isGeneratingProof && !isVerifyingProof
            ) { 
                Text(text = "Generate Proof")
            }

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = {
                    isVerifyingProof = true
                    verificationTime = ""
                    verificationResult = ""
                    statusMessage = "Verifying proof..."

                    Thread(
                        Runnable {
                            try {
                                proofBytes?.let { proof ->
                                    verificationKey?.let { vk ->
                                        val onChain = true  // Use Keccak for Solidity compatibility
                                        val lowMemoryMode = false

                                        val startTime = System.currentTimeMillis()
                                        val result = verifyNoirProof(
                                            caCircuitFile,
                                            proof,
                                            onChain,
                                            vk,
                                            lowMemoryMode
                                        )
                                        val endTime = System.currentTimeMillis()
                                        val duration = endTime - startTime

                                        verificationTime = "Verification time: $duration ms"
                                        verificationResult = "Verification result: $result"
                                        if (result)
                                            statusMessage = "Proof verified successfully!" 
                                        else 
                                            statusMessage = "Proof verification failed!"
                                    } ?: run {
                                        verificationResult = "No verification key available"
                                        statusMessage = "Please generate a proof first to get verification key"
                                    }
                                } ?: run {
                                    verificationResult = "No proof available"
                                    statusMessage = "Please generate a proof first"
                                }
                            } catch (e: Exception) {
                                verificationTime = "Verification failed"
                                verificationResult = "Error: ${e.message}"
                                statusMessage = "Proof verification error"
                                e.printStackTrace()
                            } finally {
                                isVerifyingProof = false
                            }
                        }
                    ).start()
                },
                modifier = Modifier.padding(top = 20.dp),
                enabled = !isGeneratingProof && !isVerifyingProof && proofBytes != null
            ) { 
                Text(text = "Verify Proof") 
            }

            Spacer(modifier = Modifier.height(40.dp))

            // Results displayed in a more organized way
            if (provingTime.isNotEmpty() || proofResult.isNotEmpty() || 
                verificationTime.isNotEmpty() || verificationResult.isNotEmpty()) {

                Text(
                    text = "Results",
                    fontWeight = FontWeight.Bold,
                    fontSize = 18.sp,
                    modifier = Modifier.padding(bottom = 8.dp)
                )

                if (provingTime.isNotEmpty()) {
                    Text(
                        text = provingTime,
                        modifier = Modifier.padding(top = 4.dp).width(280.dp),
                        textAlign = TextAlign.Center
                    )
                }

                if (proofResult.isNotEmpty()) {
                    Text(
                        text = proofResult,
                        modifier = Modifier.padding(top = 4.dp).width(280.dp),
                        textAlign = TextAlign.Center
                    )
                }

                if (verificationTime.isNotEmpty()) {
                    Text(
                        text = verificationTime,
                        modifier = Modifier.padding(top = 4.dp).width(280.dp),
                        textAlign = TextAlign.Center
                    )
                }

                if (verificationResult.isNotEmpty()) {
                    Text(
                        text = verificationResult,
                        modifier = Modifier.padding(top = 4.dp).width(280.dp),
                        textAlign = TextAlign.Center,
                        fontWeight = if (verificationResult.contains("true")) FontWeight.Bold else FontWeight.Normal
                    )
                }
            }
        }
    }
} 