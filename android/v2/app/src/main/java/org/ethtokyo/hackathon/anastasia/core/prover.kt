package org.ethtokyo.hackathon.anastasia.core

import uniffi.mopro.ProofResult
import uniffi.mopro.prove
import java.security.cert.Certificate
import java.security.cert.X509Certificate
import java.security.interfaces.ECPublicKey
import android.content.Context
import uniffi.mopro.CircuitMeta
import java.math.BigInteger
import java.security.MessageDigest

fun bytes(vararg ints: Int): ByteArray =
    ints.map { it.toByte() }.toByteArray()

// end entity 証明書を1枚目とした時の3枚目の証明書の情報
// 固定
val caPrevCmt = "0ede28f511104f08069e07986707873be5cbba917f02f02407ad1fdd6838679b"
val caPrevCmtR = "deadbeef"


val caCert = bytes(
    0x30,
    0x82,
    0x01,
    0xe6,
    0x30,
    0x82,
    0x01,
    0x8c,
    0xa0,
    0x03,
    0x02,
    0x01,
    0x02,
    0x02,
    0x11,
    0x00,
    0xe5,
    0xbf,
    0xa9,
    0x77,
    0x15,
    0xc1,
    0xcb,
    0x11,
    0x70,
    0xc3,
    0x0e,
    0x01,
    0x33,
    0x1e,
    0xef,
    0x42,
    0x30,
    0x0a,
    0x06,
    0x08,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x04,
    0x03,
    0x02,
    0x30,
    0x29,
    0x31,
    0x13,
    0x30,
    0x11,
    0x06,
    0x03,
    0x55,
    0x04,
    0x0a,
    0x13,
    0x0a,
    0x47,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x20,
    0x4c,
    0x4c,
    0x43,
    0x31,
    0x12,
    0x30,
    0x10,
    0x06,
    0x03,
    0x55,
    0x04,
    0x03,
    0x13,
    0x09,
    0x44,
    0x72,
    0x6f,
    0x69,
    0x64,
    0x20,
    0x43,
    0x41,
    0x33,
    0x30,
    0x1e,
    0x17,
    0x0d,
    0x32,
    0x35,
    0x30,
    0x38,
    0x32,
    0x31,
    0x31,
    0x37,
    0x32,
    0x37,
    0x30,
    0x34,
    0x5a,
    0x17,
    0x0d,
    0x32,
    0x35,
    0x30,
    0x39,
    0x31,
    0x36,
    0x31,
    0x35,
    0x32,
    0x30,
    0x31,
    0x30,
    0x5a,
    0x30,
    0x3f,
    0x31,
    0x29,
    0x30,
    0x27,
    0x06,
    0x03,
    0x55,
    0x04,
    0x03,
    0x13,
    0x20,
    0x65,
    0x35,
    0x62,
    0x66,
    0x61,
    0x39,
    0x37,
    0x37,
    0x31,
    0x35,
    0x63,
    0x31,
    0x63,
    0x62,
    0x31,
    0x31,
    0x37,
    0x30,
    0x63,
    0x33,
    0x30,
    0x65,
    0x30,
    0x31,
    0x33,
    0x33,
    0x31,
    0x65,
    0x65,
    0x66,
    0x34,
    0x32,
    0x31,
    0x12,
    0x30,
    0x10,
    0x06,
    0x03,
    0x55,
    0x04,
    0x0a,
    0x13,
    0x09,
    0x53,
    0x74,
    0x72,
    0x6f,
    0x6e,
    0x67,
    0x42,
    0x6f,
    0x78,
    0x30,
    0x59,
    0x30,
    0x13,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x02,
    0x01,
    0x06,
    0x08,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x03,
    0x01,
    0x07,
    0x03,
    0x42,
    0x00,
    0x04,
    0xa3,
    0x30,
    0xd2,
    0x88,
    0x45,
    0xc2,
    0xf4,
    0xb1,
    0x60,
    0xa7,
    0xa5,
    0xa8,
    0xec,
    0x1e,
    0x46,
    0x21,
    0x31,
    0x18,
    0x5e,
    0x25,
    0xba,
    0x48,
    0x7e,
    0xba,
    0x2f,
    0xbb,
    0x41,
    0xd7,
    0x18,
    0xa7,
    0xa6,
    0xbf,
    0xd7,
    0x87,
    0x8d,
    0xc6,
    0x36,
    0xe4,
    0x1e,
    0xa4,
    0xe2,
    0x51,
    0x6a,
    0xa9,
    0xc4,
    0xf7,
    0x1f,
    0xce,
    0x15,
    0xf5,
    0xd2,
    0x48,
    0x34,
    0x05,
    0x82,
    0x56,
    0x99,
    0x72,
    0x5c,
    0xb1,
    0x3c,
    0xeb,
    0x47,
    0xcd,
    0xa3,
    0x7f,
    0x30,
    0x7d,
    0x30,
    0x1d,
    0x06,
    0x03,
    0x55,
    0x1d,
    0x0e,
    0x04,
    0x16,
    0x04,
    0x14,
    0x83,
    0x29,
    0xbe,
    0xbb,
    0x68,
    0xbc,
    0x24,
    0xed,
    0x89,
    0x38,
    0x4d,
    0xb4,
    0xf1,
    0x94,
    0x6c,
    0x20,
    0xd7,
    0x95,
    0x9a,
    0x05,
    0x30,
    0x1f,
    0x06,
    0x03,
    0x55,
    0x1d,
    0x23,
    0x04,
    0x18,
    0x30,
    0x16,
    0x80,
    0x14,
    0xfe,
    0x62,
    0x6c,
    0xdc,
    0x2a,
    0xe5,
    0x80,
    0xe7,
    0x19,
    0x6a,
    0xca,
    0x23,
    0xdd,
    0x23,
    0xf1,
    0x39,
    0x02,
    0x46,
    0xa8,
    0xa5,
    0x30,
    0x0f,
    0x06,
    0x03,
    0x55,
    0x1d,
    0x13,
    0x01,
    0x01,
    0xff,
    0x04,
    0x05,
    0x30,
    0x03,
    0x01,
    0x01,
    0xff,
    0x30,
    0x0e,
    0x06,
    0x03,
    0x55,
    0x1d,
    0x0f,
    0x01,
    0x01,
    0xff,
    0x04,
    0x04,
    0x03,
    0x02,
    0x02,
    0x04,
    0x30,
    0x1a,
    0x06,
    0x0a,
    0x2b,
    0x06,
    0x01,
    0x04,
    0x01,
    0xd6,
    0x79,
    0x02,
    0x01,
    0x1e,
    0x04,
    0x0c,
    0xa2,
    0x01,
    0x18,
    0x20,
    0x03,
    0x66,
    0x47,
    0x6f,
    0x6f,
    0x67,
    0x6c,
    0x65,
    0x30,
    0x0a,
    0x06,
    0x08,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x04,
    0x03,
    0x02,
    0x03,
    0x48,
    0x00,
    0x30,
    0x45,
    0x02,
    0x21,
    0x00,
    0xc9,
    0x77,
    0x3e,
    0x28,
    0xaa,
    0x2b,
    0x6c,
    0x2a,
    0xe5,
    0x4b,
    0xf0,
    0x9f,
    0xaa,
    0xdf,
    0x64,
    0xc8,
    0x23,
    0x99,
    0xcb,
    0x1a,
    0xb6,
    0x6e,
    0xa9,
    0x07,
    0x24,
    0x3d,
    0x9b,
    0x83,
    0x3a,
    0x9a,
    0x57,
    0xd2,
    0x02,
    0x20,
    0x21,
    0xad,
    0x97,
    0xb8,
    0x34,
    0x04,
    0x03,
    0x56,
    0xe1,
    0x4e,
    0x15,
    0x5c,
    0x78,
    0x14,
    0x91,
    0x7a,
    0xa3,
    0x76,
    0x55,
    0x50,
    0xf9,
    0x0b,
    0x0c,
    0x5d,
    0x0b,
    0x5b,
    0xbe,
    0x43,
    0xef,
    0xcc,
    0x31,
    0xa3
)

val caAuthorityKeyId = bytes(
    0xfe, 0x62, 0x6c, 0xdc, 0x2a, 0xe5, 0x80, 0xe7, 0x19, 0x6a, 0xca, 0x23, 0xdd, 0x23, 0xf1, 0x39, 0x02, 0x46, 0xa8, 0xa5
)
val caIssuerPkX = bytes(
    0x29, 0xc2, 0xef, 0x24, 0xa4, 0xbe, 0x89, 0xfd, 0x51, 0x35, 0x89, 0x24, 0xb3, 0x2e, 0x38, 0xd2, 0x5b, 0x64, 0x9e, 0x4e, 0x96, 0xff, 0x0b, 0x6f, 0x6b, 0xe2, 0x12, 0x87, 0x1b, 0xf5, 0x26, 0x27
)
val caIssuerPkY = bytes(
    0x9a, 0x9d, 0x6b, 0x56, 0x68, 0x29, 0xbf, 0x3a, 0xf8, 0xfe, 0xe0, 0x50, 0x94, 0x3f, 0xbb, 0x70, 0xab, 0xf5, 0xb1, 0xb3, 0x5a, 0xc1, 0xe3, 0xb8, 0x95, 0xee, 0x2e, 0xc0, 0xa8, 0x5a, 0xfb, 0xd2
)

fun ProofResult.convertProofForInfura(): String {
    val originalProof = this.proof

    return originalProof
}

fun proveParentChildRel(context: Context, child: Certificate, parent: Certificate, caPrevCmt: String, caPrevCmtR: String): ProofResult {
    val circuitForChild = selectAppropriateCircuit(context, child)
    val circuitMetaForLibrary = CircuitMeta(
        "${circuitForChild.circuit}-${circuitForChild.vk}-${circuitForChild.srs}",
        circuitForChild.circuit,
        circuitForChild.vk,
        circuitForChild.srs,
    )

    println("=== === === circuit selected: ${circuitMetaForLibrary.circuitPath}, ${circuitMetaForLibrary.verificationKeyPath}, ${circuitMetaForLibrary.srsPath}")

    val parentX509 = parent as X509Certificate
    val childX509 = child as X509Certificate

    // parent証明書からDERエンコードバイト列を取得
    val certDerBytes = childX509.encoded

    // child証明書からAuthority Key Identifierを取得、なければparentのSubjectから算出
    val authorityKeyId = extractOrComputeAuthorityKeyId(childX509, parentX509)

    // parent証明書から公開鍵のx、y座標を抽出
    val (pubKeyX, pubKeyY) = extractECPublicKeyCoordinates(parentX509)

    // prove関数を呼び出し
    return prove(
        circuitMetaForLibrary,
        caCert,
        caAuthorityKeyId,
        caIssuerPkX,
        caIssuerPkY,
        caPrevCmt,
        caPrevCmtR
    )
}

private fun extractOrComputeAuthorityKeyId(child: X509Certificate, parent: X509Certificate): ByteArray {
    // Authority Key Identifier拡張を取得
    val authorityKeyIdExtension = child.getExtensionValue("2.5.29.35")

    return if (authorityKeyIdExtension != null) {
        // 拡張が存在する場合、ASN.1構造をパースして実際の値を抽出
        parseAuthorityKeyId(authorityKeyIdExtension)
    } else {
        // 拡張が存在しない場合、parentのSubject Public Key InfoからSHA-1ハッシュを計算
        computeSubjectKeyId(parent)
    }
}

private fun parseAuthorityKeyId(extensionValue: ByteArray): ByteArray {
    // ASN.1 OCTET STRINGをスキップし、内部のAuthorityKeyIdをパース
    // 簡略化した実装：実際のASN.1パーサーを使用することを推奨
    var offset = 0
    // OCTET STRINGタグをスキップ
    if (extensionValue[offset] == 0x04.toByte()) {
        offset++
        val length = extensionValue[offset].toInt() and 0xFF
        offset++
        if (length > 127) {
            // 長い形式の長さ
            val lengthOfLength = length and 0x7F
            offset += lengthOfLength
        }
    }

    // AuthorityKeyIdのSEQUENCEをスキップ
    if (extensionValue[offset] == 0x30.toByte()) {
        offset += 2 // タグと長さをスキップ
    }

    // keyIdentifier [0] IMPLICIT KeyIdentifierを探す
    if (extensionValue[offset] == 0x80.toByte()) {
        offset++
        val keyIdLength = extensionValue[offset].toInt() and 0xFF
        offset++
        return extensionValue.sliceArray(offset until offset + keyIdLength)
    }

    throw IllegalArgumentException("Authority Key Identifierの解析に失敗しました")
}

private fun computeSubjectKeyId(cert: X509Certificate): ByteArray {
    // RFC 5280に従ってSubject Key Identifierを算出
    val publicKeyInfo = cert.publicKey.encoded
    val digest = MessageDigest.getInstance("SHA-1")

    // Subject Public Key Info全体ではなく、公開鍵部分のみをハッシュ化
    // この実装は簡略化されており、実際にはBIT STRINGから公開鍵バイトを抽出する必要がある
    return digest.digest(publicKeyInfo).sliceArray(0..19) // 20バイト
}

private fun extractECPublicKeyCoordinates(cert: X509Certificate): Pair<ByteArray, ByteArray> {
    val publicKey = cert.publicKey as ECPublicKey
    val ecPoint = publicKey.w

    // ECPointからx, y座標を取得
    val x = ecPoint.affineX
    val y = ecPoint.affineY

    // BigIntegerを32バイトのバイト配列に変換（先頭ゼロ埋め）
    val xBytes = bigIntegerToFixedSizeByteArray(x, 32)
    val yBytes = bigIntegerToFixedSizeByteArray(y, 32)

    return Pair(xBytes, yBytes)
}

private fun bigIntegerToFixedSizeByteArray(bigInt: BigInteger, size: Int): ByteArray {
    val bytes = bigInt.toByteArray()

    return when {
        bytes.size == size -> bytes
        bytes.size > size -> {
            // 先頭の0x00バイトを削除（符号ビット）
            if (bytes[0] == 0.toByte() && bytes.size == size + 1) {
                bytes.sliceArray(1 until bytes.size)
            } else {
                throw IllegalArgumentException("BigIntegerが指定サイズを超えています")
            }
        }
        else -> {
            // 先頭にゼロを埋める
            ByteArray(size - bytes.size) + bytes
        }
    }
}